const Keyboard = { elements: { main: null, keysContainer: null, keys: [], enLayout: null, ruLayout: null, enKey: null, ruKey: null }, eventHandlers: { oninput: null, onclose: null }, layouts: { english: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "backspace", "q", "w", "e", "r", "t", "y", "u", "i", "o", "p", "caps", "a", "s", "d", "f", "g", "h", "j", "k", "l", "enter", "shift", "z", "x", "c", "v", "b", "n", "m", ",", ".", "/", "sound", "voice", "en", "space", "left arrow", "right arrow", "done"], russian: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "backspace", "й", "ц", "у", "к", "е", "н", "г", "ш", "щ", "з", "х", "ъ", "caps", "ф", "ы", "в", "а", "п", "р", "о", "л", "д", "ж", "э", "enter", "shift", "я", "ч", "с", "м", "и", "т", "ь", "б", "ю", ".", "sound", "voice", "ru", "space", "left arrow", "right arrow", "done"], shiftEn: ["!", "@", "#", "$", "%", "^", "&", "*", "(", ")", "backspace", "q", "w", "e", "r", "t", "y", "u", "i", "o", "p", "caps", "a", "s", "d", "f", "g", "h", "j", "k", "l", "enter", "shift", "z", "x", "c", "v", "b", "n", "m", "<", ">", "?", "sound", "voice", "en", "space", "left arrow", "right arrow", "done"], shiftRu: ["!", '"', "№", ";", "%", ":", "?", "*", "(", ")", "backspace", "й", "ц", "у", "к", "е", "н", "г", "ш", "щ", "з", "х", "ъ", "caps", "ф", "ы", "в", "а", "п", "р", "о", "л", "д", "ж", "э", "enter", "shift", "я", "ч", "с", "м", "и", "т", "ь", "б", "ю", ",", "sound", "voice", "ru", "space", "left arrow", "right arrow", "done"] }, pLayouts: { english: ["Digit1", "Digit2", "Digit3", "Digit4", "Digit5", "Digit6", "Digit7", "Digit8", "Digit9", "Digit0", "Backspace", "KeyQ", "KeyW", "KeyE", "KeyR", "KeyT", "KeyY", "KeyU", "KeyI", "KeyO", "KeyP", "CapsLock", "KeyA", "KeyS", "KeyD", "KeyF", "KeyG", "KeyH", "KeyJ", "KeyK", "KeyL", "Enter", "ShiftLeft", "KeyZ", "KeyX", "KeyC", "KeyV", "KeyB", "KeyN", "KeyM", "Comma", "Period", "Slash", "", "", "", "Space", "ArrowLeft", "ArrowRight", ""], russian: ["Digit1", "Digit2", "Digit3", "Digit4", "Digit5", "Digit6", "Digit7", "Digit8", "Digit9", "Digit0", "Backspace", "KeyQ", "KeyW", "KeyE", "KeyR", "KeyT", "KeyY", "KeyU", "KeyI", "KeyO", "KeyP", "BracketLeft", "BracketRight", "CapsLock", "KeyA", "KeyS", "KeyD", "KeyF", "KeyG", "KeyH", "KeyJ", "KeyK", "KeyL", "Semicolon", "Quote", "Enter", "ShiftLeft", "KeyZ", "KeyX", "KeyC", "KeyV", "KeyB", "KeyN", "KeyM", "Comma", "Period", "Slash", "", "", "", "Space", "ArrowLeft", "ArrowRight", ""] }, breaks: { english: ["backspace", "p", "enter", "/"], russian: ["backspace", "ъ", "enter", "."] }, mainButtons: ["shift", "caps", "backspace", "enter"], recording: null, properties: { value: "", capsLock: !1, shift: !1, cursorPositions: { start: 0, end: 0 }, language: "english", voiceRecording: !1, sound: !0 }, init() { this.elements.main = document.createElement("div"), this.elements.keysContainer = document.createElement("div"), this.elements.main.classList.add("keyboard", "keyboard--hidden"), this.elements.keysContainer.classList.add("keyboard__keys"), this.elements.enLayout = document.createElement("div"), this.elements.ruLayout = document.createElement("div"), this.elements.enLayout.append(this._createKeys(this.layouts.english, this.breaks.english)), this.elements.ruLayout.append(this._createKeys(this.layouts.russian, this.breaks.russian)), this.elements.keysContainer.append(this.elements.enLayout, this.elements.ruLayout), this.elements.ruLayout.hidden = !0, this.elements.keys = this.elements.keysContainer.querySelectorAll(".keyboard__key"), this.elements.enKey = this.elements.enLayout.querySelectorAll(".keyboard__key"), this.elements.ruKey = this.elements.ruLayout.querySelectorAll(".keyboard__key"), this.elements.main.appendChild(this.elements.keysContainer), document.body.appendChild(this.elements.main), window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition, this.recording = new SpeechRecognition, this.recording.interimResults = !1, this.recording.lang = "en-US", this.recording.continuous = !0, document.querySelectorAll(".use-keyboard-input").forEach(e => { e.addEventListener("focus", () => { this.open(e.value, t => { e.value = t }) }) }), this.recording.addEventListener("result", e => { this.properties.value += e.results[e.resultIndex][0].transcript, this._triggerEvent("oninput"), this._changePos("voice") }), document.addEventListener("keydown", e => { if (!e.code) return; let t; "english" === this.properties.language ? (t = this.pLayouts.english.indexOf(e.code), t > -1 && (this.elements.enKey[t].style.background = "rgba(255, 255, 255, 0.12)")) : (t = this.pLayouts.russian.indexOf(e.code), t > -1 && (this.elements.ruKey[t].style.background = "rgba(255, 255, 255, 0.12)")) }), document.addEventListener("keyup", e => { if (!e.code) return; let t; switch ("english" === this.properties.language ? (t = this.pLayouts.english.indexOf(e.code), t > -1 && (this.elements.enKey[t].style.background = "var(--key-bg-color)")) : (t = this.pLayouts.russian.indexOf(e.code), t > -1 && (this.elements.ruKey[t].style.background = "var(--key-bg-color)")), e.code) {
                case "ShiftLeft":
                    this._toggleShift(), document.querySelectorAll(".shift").forEach(e => e.classList.toggle("keyboard__key--active", this.properties.shift)); break;
                case "CapsLock":
                    this._toggleCapsLock(), document.querySelectorAll(".caps").forEach(e => e.classList.toggle("keyboard__key--active", this.properties.capsLock)) } }) }, _createKeys(e, t) { const s = document.createDocumentFragment(),
            i = e => `<i class="material-icons">${e}</i>`; return e.forEach(e => { const n = document.createElement("button"),
                r = -1 !== t.indexOf(e); switch (n.setAttribute("type", "button"), n.classList.add("keyboard__key"), e) {
                case "backspace":
                    n.classList.add("keyboard__key--wide", "backspace"), n.innerHTML = i("backspace"), n.addEventListener("click", e => { const t = this.properties.value,
                            s = this.properties.cursorPositions,
                            i = document.querySelector(".use-keyboard-input");
                        s.start = i.selectionStart, s.end = i.selectionEnd; let n = i.selectionStart - 1;
                        s.start === s.end ? 0 !== s.start && (this.properties.value = t.slice(0, s.start - 1) + t.slice(s.start)) : this.properties.value = t.slice(0, s.start - 1) + t.slice(s.end), this._triggerEvent("oninput"), n < 0 && (n = 0), i.selectionStart = n, i.selectionEnd = n, this.play(e), this._changePos("backspace") }); break;
                case "caps":
                    n.classList.add("keyboard__key--wide", "keyboard__key--activatable", "caps"), n.innerHTML = i("keyboard_capslock"), n.addEventListener("click", e => { this._toggleCapsLock(), n.classList.toggle("keyboard__key--active", this.properties.capsLock), this.play(e), this._changePos("caps") }); break;
                case "shift":
                    n.classList.add("keyboard__key--wide", "keyboard__key--activatable", "shift"), n.innerHTML = i("arrow_drop_up"), n.addEventListener("click", e => { this._toggleShift(), n.classList.toggle("keyboard__key--active", this.properties.shift), this.play(e), this._changePos("shift") }); break;
                case "en":
                case "ru":
                    n.classList.add("keyboard__key"), n.innerHTML = e.toLowerCase(), n.addEventListener("click", e => { this.play(e), this._changeLanguage(), this._changePos("en/ru") }); break;
                case "left arrow":
                    n.classList.add("keyboard__key"), n.innerHTML = i("keyboard_arrow_left"), n.addEventListener("click", e => { const t = document.querySelector(".use-keyboard-input");
                        0 !== t.selectionStart && t.selectionStart--, t.selectionEnd = t.selectionStart, this.play(e), this._changePos("left") }); break;
                case "right arrow":
                    n.classList.add("keyboard__key"), n.innerHTML = i("keyboard_arrow_right"), n.addEventListener("click", e => { const t = document.querySelector(".use-keyboard-input");
                        t.selectionStart !== t.value.length && t.selectionStart++, t.selectionStart = t.selectionEnd, this.play(e), this._changePos("right") }); break;
                case "enter":
                    n.classList.add("keyboard__key--wide", "enter"), n.innerHTML = i("keyboard_return"), n.addEventListener("click", e => { const t = this.properties.value,
                            s = this.properties.cursorPositions,
                            i = document.querySelector(".use-keyboard-input");
                        s.start = i.selectionStart, s.end = i.selectionEnd, this.properties.value = t.slice(0, s.start) + "\n" + t.slice(s.end), i.value = this.properties.value, this.play(e), this._changePos("enter"), this._triggerEvent("oninput") }); break;
                case "voice":
                    n.classList.add("keyboard__key--wide"), n.innerHTML = i("mic_off"), n.addEventListener("click", e => { this.properties.voiceRecording = !this.properties.voiceRecording, this.properties.voiceRecording ? (n.innerHTML = i("mic"), "english" === this.properties.language ? this.recording.lang = "en-US" : this.recording.lang = "ru-RU", this.recording.start()) : (n.innerHTML = i("mic_off"), this.recording.stop()), this.play(e), this._changePos("voice") }); break;
                case "sound":
                    n.classList.add("keyboard__key--wide"), n.innerHTML = i("volume_down"), n.addEventListener("click", e => { this.play(e), this.properties.sound = !this.properties.sound, this.properties.sound ? n.innerHTML = i("volume_down") : n.innerHTML = i("vvolume_mute"), this._changePos("sound") }); break;
                case "space":
                    n.classList.add("keyboard__key--extra-wide"), n.innerHTML = i("space_bar"), n.addEventListener("click", e => { const t = this.properties.value,
                            s = this.properties.cursorPositions,
                            i = document.querySelector(".use-keyboard-input");
                        s.start = i.selectionStart, s.end = i.selectionEnd, this.properties.value = t.slice(0, s.start) + " " + t.slice(s.end), this.play(e), this._triggerEvent("oninput"), this._changePos("space") }); break;
                case "done":
                    n.classList.add("keyboard__key", "keyboard__key--dark"), n.innerHTML = i("check_circle"), n.addEventListener("click", e => { this.play(e), this.close(), this._triggerEvent("onclose") }); break;
                default:
                    n.textContent = e.toLowerCase(), n.addEventListener("click", e => { this.play(e); const t = this.properties.value,
                            s = this.properties.cursorPositions,
                            i = document.querySelector(".use-keyboard-input");
                        s.start = i.selectionStart, s.end = i.selectionEnd, this.properties.capsLock !== this.properties.shift ? this.properties.value = t.slice(0, s.start) + n.textContent.toUpperCase() + t.slice(s.end) : this.properties.value = t.slice(0, s.start) + n.textContent.toLowerCase() + t.slice(s.end), this._triggerEvent("oninput"), this._changePos("default") }) }
            s.appendChild(n), r && s.appendChild(document.createElement("br")) }), s }, _triggerEvent(e) { "function" == typeof this.eventHandlers[e] && this.eventHandlers[e](this.properties.value) }, _toggleCapsLock() { this.properties.capsLock = !this.properties.capsLock; for (const e of this.elements.keys) 0 === e.childElementCount && (this.properties.capsLock !== this.properties.shift ? e.textContent = e.textContent.toUpperCase() : e.textContent = e.textContent.toLowerCase()) }, _toggleShift() { if (this.properties.shift = !this.properties.shift, this.properties.shift) { for (let e = 0; e < this.elements.enKey.length; e++) 0 === this.elements.enKey[e].childElementCount && (this.elements.enKey[e].textContent = this.properties.capsLock !== this.properties.shift ? this.layouts.shiftEn[e].toUpperCase() : this.layouts.shiftEn[e].toLowerCase()); for (let e = 0; e < this.elements.ruKey.length; e++) 0 === this.elements.ruKey[e].childElementCount && (this.elements.ruKey[e].textContent = this.properties.capsLock !== this.properties.shift ? this.layouts.shiftRu[e].toUpperCase() : this.layouts.shiftRu[e].toLowerCase()) } else { for (let e = 0; e < this.elements.enKey.length; e++) 0 === this.elements.enKey[e].childElementCount && (this.elements.enKey[e].textContent = this.properties.capsLock !== this.properties.shift ? this.layouts.english[e].toUpperCase() : this.layouts.english[e].toLowerCase()); for (let e = 0; e < this.elements.ruKey.length; e++) 0 === this.elements.ruKey[e].childElementCount && (this.elements.ruKey[e].textContent = this.properties.capsLock !== this.properties.shift ? this.layouts.russian[e].toUpperCase() : this.layouts.russian[e].toLowerCase()) } }, _changePos(e) { const t = document.querySelector(".use-keyboard-input"),
            s = this.properties.cursorPositions;
        t.focus(), "default" === e || "space" === e || "enter" === e ? (t.selectionStart = s.start + 1, t.selectionEnd = s.end + 1, t.focus()) : "voice" !== e && "sound" !== e && "en/ru" !== e && "shift" !== e && "caps" !== e && "backspace" !== e && "left" !== e && "right" !== e || t.focus() }, _changeLanguage() { "english" === this.properties.language ? (this.properties.language = "russian", this.elements.enLayout.hidden = !0, this.elements.ruLayout.hidden = !1) : (this.properties.language = "english", this.elements.ruLayout.hidden = !0, this.elements.enLayout.hidden = !1) }, play(e) { if (!this.properties.sound) return; let t, s = e.target; "I" === e.target.tagName && (s = e.target.closest("button")); const i = s.className.split(" "); let n = i.find(e => this.mainButtons.includes(e));
        t = n || ("english" === this.properties.language ? "en" : "ru"); const r = document.querySelector(`audio[audio-key="${t}"]`);
        r && (r.currentTime = 0, r.play()) }, open(e, t, s) { this.properties.value = e || "", this.eventHandlers.oninput = t, this.eventHandlers.onclose = s, this.elements.main.classList.remove("keyboard--hidden") }, close() { this.properties.value = "", this.eventHandlers.oninput = oninput, this.eventHandlers.onclose = onclose, this.elements.main.classList.add("keyboard--hidden") } };
window.addEventListener("DOMContentLoaded", function() { Keyboard.init() });